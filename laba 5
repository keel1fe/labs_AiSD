'''
Задана рекуррентная функция. Область определения функции – натуральные числа. Написать программу сравнительного вычисления данной функции рекурсивно и итерационно (значение, время). 
Определить (смоделировать) границы применимости рекурсивного и итерационного подхода. 
Результаты сравнительного исследования времени вычисления представить в табличной и графической форме в виде отчета по лабораторной работе.
''' 
17.	F(1) = 1, F(n) =(-1)n*(F(n–1) /(2n)!-(n + n!)), при четных n > 1 F(n)=sin(n) при нечетных n > 1

import timeit
import matplotlib.pyplot as plt
import math

# Функция для вычисления факториала числа
last_factorial = 1
def factorial(n):
    global last_factorial
    last_factorial = n * last_factorial
    return last_factorial

# Рекурсивная функция для вычисления факториала
def recursive_factorial(n):
    if n == 1 or n==0:
        return 1
    else:
        return n * recursive_factorial(n-1)

# Итеративная функция для вычисления факториала
def iterative_factorial(n):
    result = 1
    for i in range(2, n+1):
        result *= i
    return result

k=-1
last_F_value = 1;
# Функция для вычисления значения F
step = 1
def recursive_F(n):
    global last_F_value, k
    if n == 1:
        return 1
    elif n % 2 == 0 and n>1:
        k *= -1
        return k*(recursive_F(n - 1) / recursive_factorial(2 * n) - n + n * recursive_factorial(n))
    elif n > 1 and n % 2 != 0:
        return math.sin(n)

c=-1
last_factorial = 1
def iterative_F(n):
    global c, last_factorial
    F = [0] * (n + 1)
    F[1] = 1
    for i in range(2, n + 1, 2):
        c *= -1
        F[i]=c*(F[n-1] / iterative_factorial(2 * n) - n + n * iterative_factorial)
    for i in range(3, n + 1, 2):
        F[i] = iterative_factorial(n)
    return F[i]

def score_time(func, n):
    return timeit.timeit(lambda: func(n), number=1000)


n_values = range(1, 10)
recursive_times = []
iterative_times = []

for n in n_values:
    recursive_times.append(score_time(recursive_factorial, n))
    iterative_times.append(score_time(iterative_factorial, n))

print(f"{'n':<10}{'Рекурсивное время (мс)':<25}{'Итерационное время (мс)':<25}")
for i, n in enumerate(n_values):
    print(f"{n:<10}{recursive_times[i]:<25}{iterative_times[i]:<25}")

plt.plot(n_values, recursive_times, label='Рекурсивно')
plt.plot(n_values, iterative_times, label='Итерационно')
plt.xlabel('n')
plt.ylabel('Время (в миллисекундах)')
plt.legend()
plt.title('Сравнение времени вычисления функции F(n)')
plt.show()

