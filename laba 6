'''
1 часть – написать программу в соответствии со своим вариантом задания. Написать 2 варианта формирования (алгоритмический и с помощью функций Питона), сравнив по времени их выполнение.
Вариант 17. На плоскости задано К точек. Сформировать все возможные варианты выбора множества точек из них на проверку того, что они принадлежат одной прямой.
'''

import itertools
import timeit

# Генерация всех возможных комбинаций точек
def generate_point_combinations(points):
    combinations = []
    for i in range(2, len(points)+1):                                              # Рассматриваем комбинации из 2 и более точек
        combinations.extend(list(itertools.combinations(points, i)))
    return combinations

# Проверка, лежат ли точки на одной прямой
def are_points_collinear(points):
    if len(points) < 3:
        return True
    x_values = [point[0] for point in points]
    y_values = [point[1] for point in points]
    return (len(set(x_values)) == 1 or len(set(y_values)) == 1 or len(set((x_values[i] -x_values[0]) / (y_values[i] - y_values[0]) for i in range(1,len(points)))) == 1)

points = [(1, 1), (2, 2), (3, 3), (4, 4)]

# Алгоритмический подход
start_time = timeit.timeit()
combinations = generate_point_combinations(points)
generate_point_combinations(points)
collinear_points = [points for points in combinations if are_points_collinear(points)]
algorithmic_time = timeit.timeit() - start_time

# Подход с использованием функций Python
start_time = timeit.timeit()
combinations = [points for i in range(2, len(points)+1) for points in itertools.combinations(points, i)]
collinear_points = [points for points in combinations if are_points_collinear(points)]
python_functions_time = timeit.timeit() - start_time

print("Время выполнения алгоритмического подхода:", algorithmic_time)
print("Время выполнения подхода с использованием функций Python:", python_functions_time)
