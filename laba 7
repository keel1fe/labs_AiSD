Требуется для своего варианта второй части л.р. №6 (усложненной программы) разработать реализацию с использованием графического интерфейса.
В программе должны быть реализованы минимум одно окно ввода, одно окно вывода (со скролингом), одно текстовое поле, одна кнопка.

import tkinter as tk
from tkinter import scrolledtext
import itertools

def generate_combinations_python(points, num_points):
    return list(itertools.combinations(points, num_points))

# Проверка, лежат ли точки на одной прямой
def are_points_collinear(points):
    if len(points) <= 2:
        return True  # Любые две точки считаются лежащими на одной прямой
    x1, y1 = points[0]
    x2, y2 = points[1]

    for i in range(2, len(points)):
        x3, y3 = points[i]
        if (x2 - x1) * (y3 - y1) != (x3 - x1) * (y2 - y1):
            return False
    return True

def find_points_button_clicked(num_points, entries, output_area):
    points = []
    for i in range(num_points):
        x, y = int(entries[i][0].get()), int(entries[i][1].get())
        points.append((x, y))

    collinear_combinations = []
    all_collinear_combinations = []
    min_distance = float('inf')
    min_points = ()

    # Генерируем все комбинации из 2 до num_points точек
    for r in range(2, num_points + 1):
        combinations = itertools.combinations(points, r)
        for combo in combinations:
            if are_points_collinear(combo):
                collinear_combinations.append(combo)
                all_collinear_combinations.append(combo)
                # Вычисляем минимальное расстояние между парами точек
                for combination in itertools.combinations(combo, 2):
                    x1, y1 = combination[0]
                    x2, y2 = combination[1]
                    distance = abs(x1 - x2) + abs(y1 - y2)
                    if distance < min_distance:
                        min_distance = distance
                        min_points = combination

    output_area.delete(1.0, tk.END)
    output_area.insert(tk.INSERT, f"Минимальная сумма расстояний между точками: {min_distance}\n")
    output_area.insert(tk.INSERT, f"Комбинация точек с минимальной суммой расстояний: {min_points}\n")
    for point in points:
        output_area.insert(tk.INSERT, str(point) + "\n")

    output_area.insert(tk.INSERT, f"\nКоллинеарные комбинации точек:\n")
    for i, combo in enumerate(all_collinear_combinations):
        output_area.insert(tk.INSERT, f"Комбинация {i + 1}: {combo}\n")

def main():
    root = tk.Tk()
    root.title("Минимальная сумма расстояний между точками")

    frame = tk.Frame(root)
    frame.pack()

    label = tk.Label(frame, text="Введите количество точек:")
    label.grid(row=0, column=0)

    entry = tk.Entry(frame)
    entry.grid(row=0, column=1)

    def create_point_inputs():
        num_points = int(entry.get())
        for i in range(num_points):
            x_label = tk.Label(frame, text=f"Точка {i + 1} (x, y):")
            x_label.grid(row=i + 1, column=0)

            x_entry = tk.Entry(frame)
            x_entry.grid(row=i + 1, column=1)

            y_entry = tk.Entry(frame)
            y_entry.grid(row=i + 1, column=2)

            entries.append((x_entry, y_entry))

        button.grid(row=num_points + 2, column=1)

        create_point_inputs_button.destroy()

    create_point_inputs_button = tk.Button(frame, text="Ввести точки", command=create_point_inputs)
    create_point_inputs_button.grid(row=1, column=3)

    entries = []

    output_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=40, height=10)
    output_area.pack(pady=10)

    button = tk.Button(frame, text="Найти минимальную сумму расстояний между точками",
                       command=lambda: find_points_button_clicked(int(entry.get()), entries, output_area))

    root.mainloop()

if __name__ == "__main__":
    main()
